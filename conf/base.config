/* enable singularity and have it do automounts */
singularity {
  enabled = true
  autoMounts = true

  String bd = get_p(params,'bindDir')
  String sc = get_p(params,'singularityCache')

  // construct options for singularity cache bind directories
  if (bd && bd != '') {
    runOptions = "-B " + bd.split().join(" -B ")
  }

  // set singularity cache directory if specified
  if (sc && sc != "") {
    cacheDir = sc
  }
}

int cores = (int)get_p(params,'maxCpus')
nextflow.util.MemoryUnit mem = get_p(params,'maxMemory') as nextflow.util.MemoryUnit
nextflow.util.Duration d = get_p(params,'maxTime') as nextflow.util.Duration
demux = get_p(params,"illuminaDemultiplexed")
split = get_p(params,"split")

/*
 * general process options (mainly which labels go with which docker/singulariy images)
 * but also the base resource usage settings
*/
process {
  withLabel: 'fastqc'         { container = 'docker://biocontainers/fastqc:v0.11.9_cv7' }
  withLabel: 'adapterRemoval' { container = 'docker://biocontainers/adapterremoval:v2.2.0-1-deb_cv1' }
  withLabel: 'obitools'       { container = 'docker://quay.io/biocontainers/obitools:1.2.11--py27_1' }
  withLabel: 'usearch'        { container = 'docker://sunqiangkun/usearch:v1' }
  withLabel: 'vsearch'        { container = 'docker://biocontainers/vsearch:v2.10.4-1-deb_cv1' }
  /* withLabel: 'lulu'           { container = 'docker://fishbotherer/r-tools:latest' } */
  withLabel: 'r'              { container = 'docker://fishbotherer/r-tools:latest' }
  withLabel: 'python3'        { container = 'docker://python:3.6'}
  withLabel: 'multiqc'        { container = 'docker://quay.io/biocontainers/multiqc:1.19--pyhdfd78af_0'}
  /* withLabel: 'phyloseq'       { container = 'docker://fishbotherer/r-tools:latest' } */

  // these labels control how many cpus get used based on certain conditions
	withLabel: 'demux_cpus' {
    cpus = { (demux || split) ? check_max( 1 * task.attempt, 'cpus' ) : cores }
  }
	withLabel: 'all_cpus' { cpus = { cores } }

  withLabel: 'blast' {
    cpus = { params.insect ? cores / 2 : cores }
    memory = { params.insect ? mem / 2 : mem }
    container = 'docker://ncbi/blast:latest'
  }
  withLabel: 'insect' {
    cpus = { cores / 2 }
    memory = { mem / 2 }
    container = 'docker://fishbotherer/r-tools:latest'
  }

  /* limit total parallel processes to params.maxCpus */
  /* TODO: make this configurable / variable by profile */
  maxForks = cores

  cache = 'lenient' 

  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 6.GB * task.attempt, 'memory' ) }
  /* time = { check_max( 4.h * task.attempt, 'time' ) } */
}
