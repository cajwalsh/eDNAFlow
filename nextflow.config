manifest {
    author = 'Mahsa Mousavi-Derazmahalleh'
    name = 'eDNAFlow' 
    homePage = 'http://github.com/mahsa-mousavi/eDNAFlow'
    description = 'Pipeline identifies Zotus using USEARCH unoise3'
    mainScript = 'eDNAFlow.nf'
    version = '1.0.0'
}


resume = true


trace {
  
  fields = 'name,hash,status,exit,realtime,submit,%cpu,%mem'
}


/*
 * Define the pipeline parameters and their default values
 * Each of these parameters can be specified at command line (e.g. --barcode 'x.txt'); if none specified the below will be set as default 
 */

params.r1 = "R1"
params.r2 = "R2"
params.fwd = ""
params.rev = ""
params.baseDir = "."
params.reads   = "*_{R1,R2}.fastq"
params.barcode = "*_bc.txt"
params.minQuality = "20"
params.minAlignLen = "12"
params.minLen = "50"
params.primerMismatch = "2"
params.minsize = "8"
params.maxQueryResults = "10"
params.percentIdentity = "95"
params.evalue = "1e-3"
params.qcov = "100"
params.mode = "usearch32"  
params.usearch64 = ""   
params.blastDb = ""
params.customDb = ""
params.blastTask = "blastn"
params.publishMode = "symlink" 
params.bindDir = ""
params.singularityCache = ""

params.prefix = "seq"
params.illuminaDemultiplexed = false
params.concat = false
params.removeAmbiguousTags = false

params.demuxOnly = false
params.skipDemux = false
params.demuxedFasta = "*.fasta"
params.skipFastqc = false

params.assignTaxonomy = false
params.zotuTable = ""
params.blastFile = ""
params.lcaQcov = "100"
params.lcaPid = "97"
params.lcaDiff = "1"

params.luluMin="84"

params.debug = false
params.test = false
params.help = false

params.maxMemory = Runtime.getRuntime().maxMemory()
params.maxCpus = Runtime.getRuntime().availableProcessors()
params.maxTime = 240.h

params.paired = false
params.single = false

// Load base.config by default for all pipelines
// move default values for singularity and process there and then enable
includeConfig 'conf/base.config'

// Load test parameters if required
if (params.test) {
  includeConfig 'conf/initialTest.config'
}

// Load profiles from conf/profiles.config
profiles {
  includeConfig 'conf/profiles.config'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.maxMemory as nextflow.util.MemoryUnit) == 1)
        return params.maxMemory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.maxMemory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.maxTime as nextflow.util.Duration) == 1)
        return params.maxTime as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.maxTime}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.maxCpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.maxCpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

